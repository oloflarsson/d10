{"version":3,"sources":["DiceUtil.js","LocalStorageAccessor.js","App.js","serviceWorker.js","index.js"],"names":["getSuccessesSingle","again","rote","value","Math","ceil","random","successes","getSuccesses","dices","index","getExpectedSingle","Error","againArea","onlyArea","getExpected","getChance","pow","LocalStorageAccessor","key","initialValue","this","JSON","stringify","parse","json","window","localStorage","getItem","undefined","getInitial","error","setItem","STARTING_EXPECTED","DiceUtil","STARTING_CHANGE","STARTING_ROLL_ENABLED","STARTING_WILLPOWER_ENABLED","STORAGE","expected","chance","rollEnabled","willpowerEnabled","willpowerSuccesses","App","state","get","saveState","set","handleDicesChanged","event","target","setState","handleAgainChanged","handleRoteChanged","checked","handleClear","handleRoll","targetSuccesses","handleWillpower","additionalSuccesses","chanceDescription","round","expectedDescription","tooltipChance","tooltipExpected","className","title","type","min","onChange","max","onClick","disabled","React","Component","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.51ddc1c9.chunk.js","sourcesContent":["export const getValue = () => {\n  return Math.ceil(Math.random() * 10);\n};\n\nexport const getSuccessesSingle = (again, rote) => {\n  const value = getValue();\n\n  if (value < 8) {\n    if (rote) {\n      return getSuccessesSingle(again, false);\n    } else {\n      return 0;\n    }\n  }\n\n  let successes = 1;\n\n  if (value >= again) {\n    successes += getSuccessesSingle(again, false);\n  }\n\n  return successes;\n};\n\nexport const getSuccesses = (dices, again, rote) => {\n  let successes = 0;\n  for (let index = 0; index < dices; index++) {\n    successes += getSuccessesSingle(again, rote);\n  }\n  return successes;\n};\n\n/*\nconst getExpectedSingleSampledUnmemoized = (again, samples) => {\n  let sum = 0\n  for (let index = 0; index < samples; index++) {\n    sum += getSuccessesSingle(again)\n  }\n  return sum / samples\n}\nwindow.test1 = getExpectedSingleSampledUnmemoized\n*/\n\nconst getExpectedSingle = (again, rote) => {\n  if (again < 8) {\n    throw new Error(\"again must be larger than or equal to 8\");\n  }\n\n  if (rote) {\n    // There is three dice \"areas\"\n    // The (failure) reroll area, which has the expected value of a non rote dice\n    // The (success) again area, which has the value of one + non rote dice\n    // The (success) only area, which has the value of one\n\n    const rerollArea = 7;\n    const againArea = 10 - again + 1;\n    const onlyArea = 10 - rerollArea - againArea;\n\n    const rerollValue = getExpectedSingle(again, false);\n    const againValue = 1 + getExpectedSingle(again, false);\n    const onlyValue = 1;\n\n    return (\n      (rerollValue * rerollArea) / 10 +\n      (againValue * againArea) / 10 +\n      (onlyValue * onlyArea) / 10\n    );\n  }\n\n  if (again >= 11) {\n    return 3 / 10;\n  }\n\n  return 3 / (again - 1);\n};\n\nexport const getExpected = (dices, again, rote) => {\n  const expectedSingle = getExpectedSingle(again, rote);\n  return expectedSingle * dices;\n};\n\nexport const getChance = (dices, rote) => {\n  if (rote) {\n    // You need to fail with all dices, then roll them all again and fail again.\n    // So in practice you need to fail with twice the dices\n    dices *= 2;\n  }\n  return 1 - Math.pow(0.7, dices);\n};\n","class LocalStorageAccessor {\n  constructor(key, initialValue) {\n    this.key = key;\n    this.initialValue = JSON.stringify(initialValue);\n  }\n\n  getInitial() {\n    return JSON.parse(this.initialValue);\n  }\n\n  get() {\n    const json = window.localStorage.getItem(this.key);\n    if (json === null || json === undefined) {\n      return this.getInitial();\n    }\n    try {\n      return JSON.parse(json);\n    } catch (error) {\n      return this.getInitial();\n    }\n  }\n\n  set(value) {\n    const json = JSON.stringify(value)\n    return window.localStorage.setItem(this.key, json);\n  }\n}\n\nexport default LocalStorageAccessor;\n","import React from \"react\";\nimport \"./App.scss\";\nimport * as DiceUtil from \"./DiceUtil\";\nimport LocalStorageAccessor from \"./LocalStorageAccessor\";\n\nconst STARTING_DICES = 4;\nconst STARTING_AGAIN = 10;\nconst STARTING_ROTE = false;\nconst STARTING_EXPECTED = DiceUtil.getExpected(STARTING_DICES, STARTING_AGAIN);\nconst STARTING_CHANGE = DiceUtil.getChance(STARTING_DICES);\nconst STARTING_ROLL_ENABLED = true;\nconst STARTING_WILLPOWER_ENABLED = true;\nconst STARTING_SUCCESSES = 0;\nconst STARTING_WILLPOWER_SUCCESSES = 0;\nconst STORAGE = new LocalStorageAccessor(\"storagev2\", {\n  dices: STARTING_DICES,\n  again: STARTING_AGAIN,\n  rote: STARTING_ROTE,\n  expected: STARTING_EXPECTED,\n  chance: STARTING_CHANGE,\n  rollEnabled: STARTING_ROLL_ENABLED,\n  willpowerEnabled: STARTING_WILLPOWER_ENABLED,\n  successes: STARTING_SUCCESSES,\n  willpowerSuccesses: STARTING_WILLPOWER_SUCCESSES,\n});\n\nclass App extends React.Component {\n  state = STORAGE.get();\n\n  saveState = () => {\n    STORAGE.set(this.state);\n  };\n\n  handleDicesChanged = (event) => {\n    const { again, rote } = this.state;\n    const dices = event.target.value;\n    const expected = DiceUtil.getExpected(dices, again, rote);\n    const chance = DiceUtil.getChance(dices, rote);\n    this.setState(\n      {\n        dices,\n        expected,\n        chance,\n        rollEnabled: STARTING_ROLL_ENABLED,\n        willpowerEnabled: STARTING_WILLPOWER_ENABLED,\n        successes: STARTING_SUCCESSES,\n        willpowerSuccesses: STARTING_WILLPOWER_SUCCESSES,\n      },\n      this.saveState\n    );\n  };\n\n  handleAgainChanged = (event) => {\n    const { dices, rote } = this.state;\n    const again = event.target.value;\n    const expected = DiceUtil.getExpected(dices, again, rote);\n    const chance = DiceUtil.getChance(dices, rote);\n    this.setState(\n      {\n        again,\n        expected,\n        chance,\n        rollEnabled: STARTING_ROLL_ENABLED,\n        willpowerEnabled: STARTING_WILLPOWER_ENABLED,\n        successes: STARTING_SUCCESSES,\n        willpowerSuccesses: STARTING_WILLPOWER_SUCCESSES,\n      },\n      this.saveState\n    );\n  };\n\n  handleRoteChanged = (event) => {\n    const { again, dices } = this.state;\n    const rote = event.target.checked;\n    const expected = DiceUtil.getExpected(dices, again, rote);\n    const chance = DiceUtil.getChance(dices, rote);\n    this.setState(\n      {\n        rote,\n        expected,\n        chance,\n        rollEnabled: STARTING_ROLL_ENABLED,\n        willpowerEnabled: STARTING_WILLPOWER_ENABLED,\n        successes: STARTING_SUCCESSES,\n        willpowerSuccesses: STARTING_WILLPOWER_SUCCESSES,\n      },\n      this.saveState\n    );\n  };\n\n  handleClear = () => {\n    this.setState(\n      {\n        rollEnabled: STARTING_ROLL_ENABLED,\n        willpowerEnabled: STARTING_WILLPOWER_ENABLED,\n        successes: STARTING_SUCCESSES,\n        willpowerSuccesses: STARTING_WILLPOWER_SUCCESSES,\n      },\n      this.saveState\n    );\n  };\n\n  handleRoll = () => {\n    const { dices, again, rote, successes } = this.state;\n    const additionalSuccesses = DiceUtil.getSuccesses(dices, again, rote);\n    const targetSuccesses = successes + additionalSuccesses;\n    this.setState(\n      {\n        rollEnabled: false,\n        successes: targetSuccesses,\n      },\n      this.saveState\n    );\n  };\n\n  handleWillpower = () => {\n    const { again, rote, successes } = this.state;\n    const dices = 3;\n    const additionalSuccesses = DiceUtil.getSuccesses(dices, again, rote);\n    const targetSuccesses = successes + additionalSuccesses;\n    this.setState(\n      {\n        willpowerEnabled: false,\n        successes: targetSuccesses,\n        willpowerSuccesses: additionalSuccesses,\n      },\n      this.saveState\n    );\n  };\n\n  render() {\n    const {\n      dices,\n      again,\n      rote,\n      expected,\n      chance,\n      rollEnabled,\n      willpowerEnabled,\n      successes,\n      willpowerSuccesses,\n    } = this.state;\n\n    const chanceDescription = \"\" + Math.round(chance * 100) + \"%\";\n    const expectedDescription = \"\" + Math.round(expected * 100) / 100;\n\n    const tooltipDices = \"The amount of dices to be rolled.\";\n    const tooltipAgain =\n      \"Roll one more dice if the dice shows this value and above.\";\n    const tooltipRote =\n      \"Reroll all failed dice on the initial roll while not rerolling the results of that reroll, or the results of any 8, 9, or 10-again rerolls.\";\n    const tooltipChance = `The chance to get at least 1 success is ${chanceDescription} when rolling ${dices} dices.`;\n    const tooltipExpected = `The average amount of successes is ${expectedDescription} when rolling ${dices} dices with ${again}-again.`;\n\n    return (\n      <div className=\"App\">\n        <div className=\"holder\">\n          <div className=\"map\">\n            <div className=\"entry\">\n              <div className=\"key\" title={tooltipDices}>\n                Dices:\n              </div>\n              <div className=\"value\">\n                <input\n                  className=\"input\"\n                  type=\"number\"\n                  min=\"1\"\n                  value={dices}\n                  onChange={this.handleDicesChanged}\n                />\n              </div>\n            </div>\n            <div className=\"entry\">\n              <div className=\"key\" title={tooltipAgain}>\n                Again:\n              </div>\n              <div className=\"value\">\n                <input\n                  className=\"input\"\n                  type=\"number\"\n                  min=\"8\"\n                  max=\"11\"\n                  value={again}\n                  onChange={this.handleAgainChanged}\n                />\n              </div>\n            </div>\n            <div className=\"entry\">\n              <div className=\"key\" title={tooltipRote}>\n                Rote:\n              </div>\n              <div className=\"value\">\n                <input\n                  className=\"input checkbox\"\n                  type=\"checkbox\"\n                  checked={rote}\n                  onChange={this.handleRoteChanged}\n                />\n              </div>\n            </div>\n          </div>\n\n          <div className=\"stats\">\n            <div className=\"entry\" title={tooltipChance}>\n              <div className=\"key\">Chance:</div>\n              <div className=\"value\">{chanceDescription}</div>\n            </div>\n            <div className=\"entry\" title={tooltipExpected}>\n              <div className=\"key\">Expected:</div>\n              <div className=\"value\">{expectedDescription}</div>\n            </div>\n          </div>\n\n          <div className=\"buttons\">\n            <button className=\"button\" type=\"button\" onClick={this.handleClear}>\n              Clear\n            </button>\n            <button\n              className=\"button\"\n              type=\"button\"\n              onClick={this.handleRoll}\n              disabled={rollEnabled ? \"\" : \"disabled\"}\n            >\n              Roll\n            </button>\n            <button\n              className=\"button\"\n              type=\"button\"\n              onClick={this.handleWillpower}\n              disabled={willpowerEnabled ? \"\" : \"disabled\"}\n            >\n              Willpower\n            </button>\n          </div>\n\n          <div className=\"successes\">\n            {rollEnabled && willpowerEnabled ? \"?\" : successes}\n          </div>\n\n          {!willpowerEnabled && (\n            <div className=\"willpowerSuccesses\">\n              {willpowerSuccesses} from Willpower\n            </div>\n          )}\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}